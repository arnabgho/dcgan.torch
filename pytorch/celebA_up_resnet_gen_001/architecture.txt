_netD (
  (main): Sequential (
    (0): Conv2d(3, 48, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (1): LeakyReLU (0.2, inplace)
    (2): Dropout (p = 0.0)
    (3): Conv2d(48, 96, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
    (5): LeakyReLU (0.2, inplace)
    (6): Dropout (p = 0.0)
    (7): Conv2d(96, 192, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (8): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
    (9): LeakyReLU (0.2, inplace)
    (10): Dropout (p = 0.0)
    (11): Conv2d(192, 384, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (12): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True)
    (13): LeakyReLU (0.2, inplace)
    (14): Dropout (p = 0.0)
    (15): Conv2d(384, 1, kernel_size=(4, 4), stride=(1, 1), bias=False)
    (16): Sigmoid ()
  )
)
_netG (
  (main): Sequential (
    (0): ConvTranspose2d(100, 384, kernel_size=(4, 4), stride=(1, 1), bias=False)
    (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True)
    (2): ReLU (inplace)
    (3): Dropout (p = 0.0)
    (4): UpBATCHResBlock (
      (model1): ResBlock (
        (model): Sequential (
          (0): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (model2): ResBlock (
        (model): Sequential (
          (0): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (model3): ResBlock (
        (model): Sequential (
          (0): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (model4): ResBlock (
        (model): Sequential (
          (0): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (final): Conv2d(384, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (5): UpBATCHResBlock (
      (model1): ResBlock (
        (model): Sequential (
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (model2): ResBlock (
        (model): Sequential (
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (model3): ResBlock (
        (model): Sequential (
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (model4): ResBlock (
        (model): Sequential (
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (final): Conv2d(192, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (6): UpBATCHResBlock (
      (model1): ResBlock (
        (model): Sequential (
          (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (model2): ResBlock (
        (model): Sequential (
          (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (model3): ResBlock (
        (model): Sequential (
          (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (model4): ResBlock (
        (model): Sequential (
          (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (final): Conv2d(96, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (7): UpBATCHResBlock (
      (model1): ResBlock (
        (model): Sequential (
          (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (model2): ResBlock (
        (model): Sequential (
          (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (model3): ResBlock (
        (model): Sequential (
          (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (model4): ResBlock (
        (model): Sequential (
          (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU (inplace)
          (2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (final): Conv2d(48, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (8): Tanh ()
  )
)
